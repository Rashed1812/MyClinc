// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Data
{
    [DbContext(typeof(ClincDbContext))]
    partial class ClincDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DAL.Data.Models.Consultation", b =>
                {
                    b.Property<int>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationId"));

                    b.Property<string>("BirthCountry")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentCountry")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalSpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReceiptSent")
                        .HasColumnType("bit");

                    b.Property<string>("ReceiptToken")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkOrStudyPlace")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConsultationId");

                    b.HasIndex("MedicalSpecialtyId");

                    b.ToTable("Consultations");
                });

            modelBuilder.Entity("DAL.Data.Models.DoctorJoinRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateFilePath")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificatesAndCourses")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationalDegree")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GraduationCertificatePath")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsTermsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("LicenseFilePath")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DoctorJoinRequests");
                });

            modelBuilder.Entity("DAL.Data.Models.DoctorSpecialty", b =>
                {
                    b.Property<int>("DoctorJoinRequestId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalSpecialtyId")
                        .HasColumnType("int");

                    b.HasKey("DoctorJoinRequestId", "MedicalSpecialtyId");

                    b.HasIndex("MedicalSpecialtyId");

                    b.ToTable("DoctorSpecialties");
                });

            modelBuilder.Entity("DAL.Data.Models.MedicalSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconClass")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsVisibleToPatient")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("MedicalSpecialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "خطط غذائية متخصصة وعلاج اضطرابات التغذية",
                            IconClass = "🥗",
                            IsVisibleToPatient = true,
                            Name = "التغذية العلاجية",
                            Price = 30m
                        },
                        new
                        {
                            Id = 2,
                            Description = "استشارات جراحية متقدمة وتقييم الحالات",
                            IconClass = "⚕️",
                            IsVisibleToPatient = true,
                            Name = "الجراحة العامة",
                            Price = 50m
                        },
                        new
                        {
                            Id = 3,
                            Description = "علاج الاضطرابات النفسية والدعم النفسي",
                            IconClass = "🧠",
                            IsVisibleToPatient = true,
                            Name = "الطب النفسي",
                            Price = 40m
                        },
                        new
                        {
                            Id = 4,
                            IconClass = "❤️",
                            IsVisibleToPatient = false,
                            Name = "أمراض القلب"
                        },
                        new
                        {
                            Id = 5,
                            IconClass = "🩺",
                            IsVisibleToPatient = false,
                            Name = "الأمراض الجلدية"
                        },
                        new
                        {
                            Id = 6,
                            IconClass = "👶",
                            IsVisibleToPatient = false,
                            Name = "طب الأطفال"
                        },
                        new
                        {
                            Id = 7,
                            IconClass = "🦴",
                            IsVisibleToPatient = false,
                            Name = "العظام"
                        },
                        new
                        {
                            Id = 8,
                            IconClass = "🧠",
                            IsVisibleToPatient = false,
                            Name = "الأعصاب"
                        },
                        new
                        {
                            Id = 9,
                            IconClass = "🏥",
                            IsVisibleToPatient = false,
                            Name = "تخصص آخر"
                        });
                });

            modelBuilder.Entity("DAL.Data.Models.Consultation", b =>
                {
                    b.HasOne("DAL.Data.Models.MedicalSpecialty", "MedicalSpecialty")
                        .WithMany("Consultations")
                        .HasForeignKey("MedicalSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MedicalSpecialty");
                });

            modelBuilder.Entity("DAL.Data.Models.DoctorSpecialty", b =>
                {
                    b.HasOne("DAL.Data.Models.DoctorJoinRequest", "DoctorJoinRequest")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("DoctorJoinRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Data.Models.MedicalSpecialty", "MedicalSpecialty")
                        .WithMany("DoctorSpecialties")
                        .HasForeignKey("MedicalSpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DoctorJoinRequest");

                    b.Navigation("MedicalSpecialty");
                });

            modelBuilder.Entity("DAL.Data.Models.DoctorJoinRequest", b =>
                {
                    b.Navigation("DoctorSpecialties");
                });

            modelBuilder.Entity("DAL.Data.Models.MedicalSpecialty", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("DoctorSpecialties");
                });
#pragma warning restore 612, 618
        }
    }
}
